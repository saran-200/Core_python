====>print(type(variable_name))====> define the type
===> a=input()
     b= input()
     print(a+b)

     input:
       7
       8
     output:
         78      bcz of in the input cases they stored as a string as default (if we        	 want to get a integer we want to mention its datatype )
===> True and False [T&F shoudl be capital]
        
====> for print * methods we should use """"" end=("") """"
===> { str=input("enter a string :")
  	print(str[::-1])   } ----> to reverse the string 
====> to get multi variables 
	a,s,b,h=1,23,45,7
===> to print multi varibles in single statement
	print(a,s,b,h)
==> valid for datatypes 
	underscore,alphabets,sometimes keywords too 
===>invaild for datatypes 
       intital wid integer,spl characters,and indentations 
========================================>OOPS<==================
object oriented programming structure
  Types:
    object
    classs
    inheritance
      Types====>5:
        ==>single 1-1
        ==>multi level 1-2-3-4
        ==> multiple  1-2,1-2-3,1-3-4
        ==>hybrid  1-2,1-3,1-4
        ==>hierachical 1-2,2-1,1-3,2-3,2-4,1-4,4-1,2-4
    encapsulation
      getter ,setter
    abstraction
       
    polymhorpisum
       overloading(compile time) ====> same function name and different parameters
       overriding(runtime) ====> same function name and same parameters
      
======> ERROR handleling <===========
To handle the error and give a another choice to them and make them to run and excute from the beginning 
 It has three parts such as :   (try,except,final)
 try is true then it excute try and exit 
 if try part is false or contains any error then they return to the except part and run the the certain codes
 always be smile always be smile 